"""
Telegram bot handlers - Clean version without merge conflicts
"""
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from datetime import datetime, timedelta
import os
import re
import aiohttp
import asyncio

router = Router()

# Admin IDs - replace with actual admin IDs
ADMIN_IDS = [448592121]  # Replace with actual admin IDs

# CryptoPay API configuration
CRYPTOPAY_TOKEN = "479115:AARxfBgUT3h1n9oBCwY1Y3UbgwN1n6S9mHn"
CRYPTOPAY_API_URL = "https://pay.crypt.bot/api"

# Subscription prices and durations
SUBSCRIPTION_PLANS = {
    "1_day": {"price": 1.0, "days": 1, "text": "1 –¥–µ–Ω—å - $1"},
    "7_days": {"price": 3.0, "days": 7, "text": "7 –¥–Ω—ñ–≤ - $3"},
    "14_days": {"price": 5.0, "days": 14, "text": "14 –¥–Ω—ñ–≤ - $5"},
    "30_days": {"price": 7.0, "days": 30, "text": "30 –¥–Ω—ñ–≤ - $7"},
    "lifetime": {"price": 15.0, "days": 99999, "text": "–ù–∞–∑–∞–≤–∂–¥–∏ - $15"}
}


class RegistrationStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_birth_date = State()
    waiting_for_photo = State()
    waiting_for_login = State()
    waiting_for_password = State()


class TicketStates(StatesGroup):
    waiting_for_ticket_message = State()


async def create_cryptopay_invoice(user_id: int, amount: float, currency: str = "USDT", description: str = "") -> dict:
    """Create invoice in CryptoPay"""
    url = f"{CRYPTOPAY_API_URL}/createInvoice"
    
    payload = {
        "asset": currency,
        "amount": str(amount),
        "description": description,
        "hidden_message": f"Payment for user {user_id}",
        "paid_btn_name": "openBot",
        "paid_btn_url": "https://t.me/maijediiabot",
        "payload": str(user_id)
    }
    
    headers = {
        "Crypto-Pay-API-Token": CRYPTOPAY_TOKEN
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as response:
                data = await response.json()
                if data.get("ok"):
                    return data.get("result", {})
                else:
                    print(f"CryptoPay error: {data}")
                    return None
    except Exception as e:
        print(f"CryptoPay exception: {e}")
        return None


async def check_invoice_status(invoice_id: int) -> dict:
    """Check invoice payment status in CryptoPay"""
    url = f"{CRYPTOPAY_API_URL}/getInvoices"
    
    payload = {
        "invoice_ids": str(invoice_id)
    }
    
    headers = {
        "Crypto-Pay-API-Token": CRYPTOPAY_TOKEN
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as response:
                data = await response.json()
                if data.get("ok") and data.get("result", {}).get("items"):
                    return data["result"]["items"][0]
                return None
    except Exception as e:
        print(f"CryptoPay check error: {e}")
        return None


@router.message(Command("start"))
async def cmd_start(message: Message, db):
    """Handle /start command"""
    user = await db.get_user_by_telegram_id(message.from_user.id)
    
    if user:
        await message.answer(
            "‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤ –º–µ–Ω—é –±–æ—Ç–∞."
        )
    else:
        await message.answer(
            "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è–ª–∏ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.\n"
            "–î—è–∫—É—î–º–æ —Ç–∞ –≤—ñ—Ç–∞—î–º–æ –í–∞—Å!\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤ –º–µ–Ω—é –±–æ—Ç–∞."
        )


@router.message(Command("menu"))
async def cmd_menu(message: Message, db):
    """Handle /menu command"""
    user = await db.get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="start_registration")]
        ])
        
        await message.answer(
            "‚ú® –í—ñ—Ç–∞—î–º–æ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç.\n\n"
            "üõë –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –ø—É—Å—Ç–∏–π",
            reply_markup=keyboard
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üì≤ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫", callback_data="download_app")],
            [InlineKeyboardButton(text="üíé –ü—Ä–∏–¥–±–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
            [InlineKeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")]
        ])
        
        await message.answer(
            "‚ú® –í—ñ—Ç–∞—î–º–æ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç.",
            reply_markup=keyboard
        )


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery, db):
    """Show user profile"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    last_login = user['last_login'] if user['last_login'] else "–ù—ñ–∫–æ–ª–∏"
    if last_login != "–ù—ñ–∫–æ–ª–∏":
        try:
            dt = datetime.fromisoformat(last_login)
            last_login = dt.strftime("%d.%m.%Y –æ %H:%M")
        except:
            pass
    
    subscription_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user['subscription_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    subscription_until = user['subscription_until'] if user['subscription_until'] else "‚Äî"
    
    profile_text = (
        "üë§ –ü—Ä–æ—Ñ—ñ–ª—å\n\n"
        f"üëº –ü–Ü–ë: {user['full_name']}\n"
        f"üóìÔ∏è –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {user['birth_date']}\n"
        f"üì≤ –û—Å—Ç–∞–Ω–Ω—ñ–π –≤—Ö—ñ–¥ –≤ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –æ: {last_login}\n"
        f"üåù –°—Ç–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏: {subscription_status}\n"
        f"üåÄ –¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏: {user['subscription_type']}\n"
        f"üé´ –ü—ñ–¥–ø–∏—Å–∫–∞ –¥—ñ–π—Å–Ω–∞ –¥–æ: {subscription_until}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", callback_data="edit_profile")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(profile_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "edit_profile")
async def edit_profile(callback: CallbackQuery, state: FSMContext, db):
    """Start profile editing (re-registration)"""
    await db.clear_registration_state(callback.from_user.id)
    await callback.message.edit_text(
        "üíª –ü–æ—á–Ω–µ–º–æ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –í–∞—Å.\n\n"
        "1) –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "–ú–∞—Å–∫ –Ü–ª–æ–Ω –ú–∞–∫—Å–∏–º–æ–≤–∏—á"
    )
    await state.set_state(RegistrationStates.waiting_for_full_name)
    await db.save_registration_state(callback.from_user.id, "waiting_for_full_name", {"is_editing": True})
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """Return to main menu"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üì≤ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫", callback_data="download_app")],
        [InlineKeyboardButton(text="üíé –ü—Ä–∏–¥–±–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
        [InlineKeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")]
    ])
    
    await callback.message.edit_text(
        "‚ú® –í—ñ—Ç–∞—î–º–æ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç.",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "download_app")
async def download_app(callback: CallbackQuery, db):
    """Download app"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    # Check if user has active subscription
    if not user.get('subscription_active', False):
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏. –ü—Ä–∏–¥–±–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.",
            show_alert=True
        )
        return
    
    # Get IPA URL from Cloudinary (set in environment variable)
    ipa_url = os.getenv("IPA_CLOUDINARY_URL")
    
    if not ipa_url:
        await callback.answer(
            "‚ùå –ó–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            show_alert=True
        )
        return
    
    try:
        # Send download link with instructions
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ IPA", url=ipa_url)],
            [InlineKeyboardButton(text="üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—é", callback_data="install_guide")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(
            "üì≤ <b>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –ú–∞–π–∂–µ –î—ñ—è</b>\n\n"
            "‚úÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n\n"
            "üìã <b>–ö—Ä–æ–∫–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
            "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .ipa —Ñ–∞–π–ª—É\n"
            "2Ô∏è‚É£ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —á–µ—Ä–µ–∑ Sideloadly, AltStore –∞–±–æ —ñ–Ω—à–∏–π –¥–æ–¥–∞—Ç–æ–∫\n"
            "3Ô∏è‚É£ –ü—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫\n"
            "4Ô∏è‚É£ –£–≤—ñ–π–¥—ñ—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–≤—ñ–π –ª–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å\n"
            "5Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–ª–∏–≤–æ:</b> –î–ª—è –≤—Ö–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å, —è–∫—ñ –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ –±–æ—Ç—ñ",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            show_alert=True
        )


@router.callback_query(F.data == "install_guide")
async def install_guide(callback: CallbackQuery):
    """Show installation guide"""
    guide_text = (
        "üìñ <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—é –ú–∞–π–∂–µ –î—ñ—è</b>\n\n"
        "<b>üì± –°–ø–æ—Å—ñ–± 1: Sideloadly (–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)</b>\n"
        "1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ Sideloadly –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ —Å–∞–π—Ç—É\n"
        "2. –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å iPhone –¥–æ –∫–æ–º–ø'—é—Ç–µ—Ä–∞\n"
        "3. –í—ñ–¥–∫—Ä–∏–π—Ç–µ Sideloadly —ñ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å .ipa —Ñ–∞–π–ª\n"
        "4. –í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π Apple ID (–¥–∞–Ω—ñ –ù–ï –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è)\n"
        "5. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Start —ñ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "6. –ù–∞ iPhone: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚Üí –û—Å–Ω–æ–≤–Ω—ñ ‚Üí VPN —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—î–º\n"
        "7. –î–æ–≤—ñ—Ä—ñ—Ç—å —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞\n\n"
        "<b>üì± –°–ø–æ—Å—ñ–± 2: AltStore</b>\n"
        "1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å AltServer –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä\n"
        "2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å AltStore –Ω–∞ iPhone\n"
        "3. –í—ñ–¥–∫—Ä–∏–π—Ç–µ AltStore –Ω–∞ iPhone\n"
        "4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å + —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å .ipa —Ñ–∞–π–ª\n"
        "5. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–ª–∏–≤–æ:</b>\n"
        "‚Ä¢ –ó–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∫–æ–∂–Ω—ñ 7 –¥–Ω—ñ–≤\n"
        "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –∑ –±–æ—Ç–∞ –¥–ª—è –≤—Ö–æ–¥—É\n"
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="download_app")]
    ])
    
    await callback.message.edit_text(
        guide_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "buy_subscription")
async def buy_subscription(callback: CallbackQuery, db):
    """Buy subscription - show plans"""
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    # Create keyboard with subscription plans
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=SUBSCRIPTION_PLANS["1_day"]["text"], callback_data="sub_1_day")],
        [InlineKeyboardButton(text=SUBSCRIPTION_PLANS["7_days"]["text"], callback_data="sub_7_days")],
        [InlineKeyboardButton(text=SUBSCRIPTION_PLANS["14_days"]["text"], callback_data="sub_14_days")],
        [InlineKeyboardButton(text=SUBSCRIPTION_PLANS["30_days"]["text"], callback_data="sub_30_days")],
        [InlineKeyboardButton(text=SUBSCRIPTION_PLANS["lifetime"]["text"], callback_data="sub_lifetime")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(
        "üíé –ü—Ä–∏–¥–±–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("sub_"))
async def process_subscription_payment(callback: CallbackQuery, db):
    """Process subscription payment"""
    plan_key = callback.data.replace("sub_", "")
    
    if plan_key not in SUBSCRIPTION_PLANS:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–ª–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏!", show_alert=True)
        return
    
    plan = SUBSCRIPTION_PLANS[plan_key]
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # Show loading message
    await callback.message.edit_text(
        f"üíé –û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É...\n\n"
        f"–ü–ª–∞–Ω: {plan['text']}\n"
        f"–°—É–º–∞: ${plan['price']}\n\n"
        f"‚è≥ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É..."
    )
    
    # Create invoice in CryptoPay
    invoice = await create_cryptopay_invoice(
        user_id=callback.from_user.id,
        amount=plan['price'],
        currency="USDT",
        description=f"–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ {plan['text']}"
    )
    
    if not invoice:
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É", show_alert=True)
        return
    
    # Get payment link and invoice ID
    invoice_url = invoice.get("pay_url", "#")
    invoice_id = invoice.get("invoice_id")
    
    # Create payment confirmation button with invoice_id in callback
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏", url=invoice_url)],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data=f"check_payment_{plan_key}_{invoice_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_subscription")]
    ])
    
    await callback.message.edit_text(
        f"üíé –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ\n\n"
        f"–ü–ª–∞–Ω: {plan['text']}\n"
        f"–°—É–º–∞: ${plan['price']}\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç–∏' –∞–±–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n"
        f"{invoice_url}\n\n"
        f"‚ö†Ô∏è –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –æ–ø–ª–∞—Ç–∏–≤' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery, db):
    """Check payment status and activate subscription"""
    # Parse callback data: check_payment_{plan_key}_{invoice_id}
    parts = callback.data.replace("check_payment_", "").split("_")
    
    if len(parts) < 2:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–∏—Ö!", show_alert=True)
        return
    
    plan_key = "_".join(parts[:-1])  # In case plan_key has underscores like "1_day"
    invoice_id = parts[-1]
    
    if plan_key not in SUBSCRIPTION_PLANS:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–ª–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏!", show_alert=True)
        return
    
    plan = SUBSCRIPTION_PLANS[plan_key]
    user = await db.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # Show checking message
    await callback.message.edit_text(
        "‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–ª–∞—Ç–∏...\n\n"
        "–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞."
    )
    
    # Check actual payment status via CryptoPay API
    try:
        invoice_id_int = int(invoice_id)
        invoice_status = await check_invoice_status(invoice_id_int)
        
        if not invoice_status:
            # Show error with retry button
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data=callback.data)],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_subscription")]
            ])
            
            await callback.message.edit_text(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=keyboard
            )
            await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏", show_alert=True)
            return
        
        # Check if invoice is paid
        invoice_paid = invoice_status.get("status") == "paid"
        
        if not invoice_paid:
            # Show error with retry button
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data=callback.data)],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_subscription")]
            ])
            
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç—ñ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n\n"
                "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É.\n\n"
                "–Ø–∫—â–æ –≤–∏ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑' —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.",
                reply_markup=keyboard
            )
            await callback.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
    except (ValueError, TypeError) as e:
        print(f"Error parsing invoice_id: {e}")
        # Show error with retry button
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data=callback.data)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_subscription")]
        ])
        
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂—É\n\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=keyboard
        )
        await callback.answer("–ü–æ–º–∏–ª–∫–∞", show_alert=True)
        return
    
    # Payment confirmed! Now activate the subscription
    
    # Calculate new subscription end date
    if plan_key == "lifetime":
        subscription_until = None
        subscription_until_display = "–ù–∞–∑–∞–≤–∂–¥–∏"
        subscription_type = "–ù–∞–∑–∞–≤–∂–¥–∏"
    else:
        current_date = datetime.now()
        if user['subscription_until']:
            try:
                # Parse existing subscription_until (can be datetime or string)
                if isinstance(user['subscription_until'], str):
                    current_date = datetime.fromisoformat(user['subscription_until'])
                elif isinstance(user['subscription_until'], datetime):
                    current_date = user['subscription_until']
            except:
                current_date = datetime.now()
        
        subscription_until = current_date + timedelta(days=plan['days'])
        subscription_until_display = subscription_until.isoformat()
        subscription_type = f"{plan['days']} –¥–Ω—ñ–≤"
    
    # Update user subscription
    user_obj = await db.get_user_by_id(user['id'])
    if user_obj:
        await db.update_subscription(
            user_id=user['id'],
            active=True,
            sub_type=subscription_type,
            until=subscription_until
        )
        success = True
    else:
        success = False
    
    if success:
        display_until = subscription_until_display if plan_key != "lifetime" else "–ù–∞–∑–∞–≤–∂–¥–∏"
        await callback.message.edit_text(
            f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
            f"–ü–ª–∞–Ω: {plan['text']}\n"
            f"–î—ñ–π—Å–Ω–∞ –¥–æ: {display_until}\n\n"
            f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é!"
        )
        
        # Show back to menu button
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer("–ü—ñ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!", show_alert=True)
    else:
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏\n\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó", show_alert=True)


@router.callback_query(F.data == "settings")
async def settings(callback: CallbackQuery):
    """Settings"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
        "–ü–æ–∫–∏ —â–æ —Ç—É—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î.",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "help")
async def help_handler(callback: CallbackQuery):
    """Help information"""
    help_text = (
        "‚ùì –î–æ–ø–æ–º–æ–≥–∞\n\n"
        "üì± –ü—Ä–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫:\n"
        "–ú–∞–π–∂–µ –î—ñ—è - —Ü–µ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∞—à–∏–º–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏. "
        "–£ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –≤–∏ –º–æ–∂–µ—Ç–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–≤–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∏, –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ó—Ö —É –±—É–¥—å-—è–∫–∏–π —á–∞—Å —Ç–∞ –º–∞—Ç–∏ "
        "–¥–æ—Å—Ç—É–ø –¥–æ –Ω–∏—Ö –∑ –≤–∞—à–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é.\n\n"
        "üíé –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É:\n"
        "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É 'üíé –ü—Ä–∏–¥–±–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É' –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é\n"
        "2. –û–±–µ—Ä—ñ—Ç—å –ø–ª–∞–Ω –ø—ñ–¥–ø–∏—Å–∫–∏ (1 –¥–µ–Ω—å, 7 –¥–Ω—ñ–≤, 14 –¥–Ω—ñ–≤, 30 –¥–Ω—ñ–≤ –∞–±–æ –Ω–∞–∑–∞–≤–∂–¥–∏)\n"
        "3. –û–ø–ª–∞—Ç—ñ—Ç—å —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É (USDT) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é CryptoPay\n"
        "4. –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏\n"
        "5. –ü—ñ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É\n\n"
        "üì• –Ø–∫ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫:\n"
        "1. –ü—Ä–∏–¥–±–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É\n"
        "2. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É —Ä–æ–∑–¥—ñ–ª 'üì≤ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫' –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é\n"
        "3. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ .ipa —Ñ–∞–π–ª –Ω–∞ –≤–∞—à –ø—Ä–∏—Å—Ç—Ä—ñ–π\n"
        "4. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —á–µ—Ä–µ–∑ Sideloadly –∞–±–æ —ñ–Ω—à–∏–π –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è\n"
        "5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏\n\n"
        "üÜò –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫:\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç", callback_data="create_ticket")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(help_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "create_ticket")
async def create_ticket_handler(callback: CallbackQuery, state: FSMContext):
    """Start creating a support ticket"""
    await callback.message.edit_text(
        "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç–∞\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∑ —è–∫–æ—é –≤–∏ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—è.\n\n"
        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ."
    )
    await state.set_state(TicketStates.waiting_for_ticket_message)
    await callback.answer()


@router.message(TicketStates.waiting_for_ticket_message)
async def process_ticket_message(message: Message, state: FSMContext, bot, db):
    """Process ticket message and send to admins"""
    ticket_message = message.text
    
    # Get user info
    user = await db.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å!")
        await state.clear()
        return
    
    user_info = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
    
    # Create ticket in database
    ticket_id = await db.create_ticket(
        user_id=user['id'],  # Use user database ID, not telegram ID
        user_telegram_id=message.from_user.id,  # Telegram ID for sending messages
        message=ticket_message,
        status="open"
    )
    
    # Send notification to admins
    ticket_text = (
        f"üìù –ù–æ–≤–∏–π —Ç—ñ–∫–µ—Ç #{ticket_id}\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_info}\n"
        f"üìß –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{ticket_message}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_ticket_{ticket_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä–∏—Ç–∏", callback_data=f"close_ticket_{ticket_id}")]
    ])
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, ticket_text, reply_markup=keyboard)
        except:
            pass
    
    await message.answer(
        f"‚úÖ –í–∞—à —Ç—ñ–∫–µ—Ç #{ticket_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ –π–æ–≥–æ —Ç–∞ –Ω–∞–¥—ñ—à–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
        "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    )
    
    await state.clear()


# Admin ticket management handlers
class TicketReplyStates(StatesGroup):
    waiting_for_reply = State()


@router.callback_query(F.data.startswith("reply_ticket_"))
async def start_reply_to_ticket(callback: CallbackQuery, state: FSMContext, db):
    """Start replying to a ticket"""
    ticket_id = int(callback.data.replace("reply_ticket_", ""))
    
    # Get ticket info
    ticket = await db.get_ticket(ticket_id)
    if not ticket:
        await callback.answer("–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    await db.update_ticket_status(ticket_id, "answering")
    
    await callback.message.edit_text(
        f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç—ñ–∫–µ—Ç #{ticket_id}\n\n"
        f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n{ticket['message']}\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:"
    )
    
    await state.set_state(TicketReplyStates.waiting_for_reply)
    await state.update_data(ticket_id=ticket_id)
    await callback.answer()


@router.message(TicketReplyStates.waiting_for_reply)
async def process_ticket_reply(message: Message, state: FSMContext, bot, db):
    """Process admin reply to ticket"""
    data = await state.get_data()
    ticket_id = data['ticket_id']
    
    # Get ticket info
    ticket = await db.get_ticket(ticket_id)
    if not ticket:
        await message.answer("‚ùå –¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        await state.clear()
        return
    
    admin_reply = message.text
    
    # Save reply to database
    await db.add_ticket_reply(ticket_id, admin_reply)
    
    # Update ticket status
    await db.update_ticket_status(ticket_id, "answered")
    
    # Send reply to user
    try:
        await bot.send_message(
            ticket['user_telegram_id'],
            f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏\n\n"
            f"üìù –í–∞—à —Ç—ñ–∫–µ—Ç #{ticket_id}:\n{ticket['message']}\n\n"
            f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å:\n{admin_reply}"
        )
    except:
        pass
    
    await message.answer(
        f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É!\n\n"
        f"–¢—ñ–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä–∏—Ç–æ."
    )
    
    await state.clear()


@router.callback_query(F.data.startswith("close_ticket_"))
async def close_ticket(callback: CallbackQuery, db, bot):
    """Close a ticket without reply"""
    ticket_id = int(callback.data.replace("close_ticket_", ""))
    
    # Get ticket info
    ticket = await db.get_ticket(ticket_id)
    if not ticket:
        await callback.answer("–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    # Update ticket status
    await db.update_ticket_status(ticket_id, "closed")
    
    # Notify user
    try:
        await bot.send_message(
            ticket['user_telegram_id'],
            f"üìù –¢—ñ–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä–∏—Ç–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    except:
        pass
    
    await callback.message.edit_text(
        f"‚úÖ –¢—ñ–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä–∏—Ç–æ."
    )
    await callback.answer()


# Admin commands
@router.message(Command("admin"))
async def admin_panel(message: Message, db):
    """Admin panel for managing tickets"""
    # Check if user is admin
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    # Get open tickets
    tickets = await db.get_open_tickets()
    
    if not tickets:
        await message.answer(
            "üìã –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n\n"
            "üìù –í—ñ–¥–∫—Ä–∏—Ç—ñ —Ç—ñ–∫–µ—Ç–∏: –Ω–µ–º–∞—î\n\n"
            "–£—Å—ñ —Ç—ñ–∫–µ—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ ‚úÖ"
        )
        return
    
    # Display tickets
    tickets_text = f"üìã –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n\nüìù –í—ñ–¥–∫—Ä–∏—Ç—ñ —Ç—ñ–∫–µ—Ç–∏: {len(tickets)}\n\n"
    
    keyboard_buttons = []
    for ticket in tickets:
        # Get user info
        user = await db.get_user_by_id(ticket['user_id'])
        user_name = user['full_name'] if user else f"ID: {ticket['user_telegram_id']}"
        
        # Format creation date
        try:
            created_dt = datetime.fromisoformat(ticket['created_at'])
            created_str = created_dt.strftime("%d.%m.%Y %H:%M")
        except:
            created_str = ticket['created_at']
        
        # Display ticket preview
        tickets_text += f"üîπ –¢—ñ–∫–µ—Ç #{ticket['id']}\n"
        tickets_text += f"üë§ {user_name}\n"
        tickets_text += f"üìÖ {created_str}\n"
        tickets_text += f"üìù {ticket['message'][:50]}...\n\n"
        
        # Add button for each ticket
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"–¢—ñ–∫–µ—Ç #{ticket['id']} - {user_name[:20]}",
                callback_data=f"admin_ticket_{ticket['id']}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(tickets_text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("admin_ticket_"))
async def admin_view_ticket(callback: CallbackQuery, db):
    """View specific ticket details"""
    # Check if user is admin
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É!", show_alert=True)
        return
    
    ticket_id = int(callback.data.replace("admin_ticket_", ""))
    
    # Get ticket
    ticket = await db.get_ticket(ticket_id)
    if not ticket:
        await callback.answer("–¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    # Get user info
    user = await db.get_user_by_id(ticket['user_id'])
    user_name = user['full_name'] if user else f"ID: {ticket['user_telegram_id']}"
    
    # Format dates
    try:
        created_dt = datetime.fromisoformat(ticket['created_at'])
        created_str = created_dt.strftime("%d.%m.%Y %H:%M")
    except:
        created_str = ticket['created_at']
    
    ticket_text = (
        f"üìã –¢—ñ–∫–µ—Ç #{ticket_id}\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}\n"
        f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_str}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {ticket['status']}\n\n"
        f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{ticket['message']}"
    )
    
    if ticket['reply']:
        ticket_text += f"\n\nüí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å:\n{ticket['reply']}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_ticket_{ticket_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä–∏—Ç–∏", callback_data=f"close_ticket_{ticket_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(ticket_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, db):
    """Return to admin ticket list"""
    # Check if user is admin
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É!", show_alert=True)
        return
    
    # Get open tickets
    tickets = await db.get_open_tickets()
    
    if not tickets:
        await callback.message.edit_text(
            "üìã –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n\n"
            "üìù –í—ñ–¥–∫—Ä–∏—Ç—ñ —Ç—ñ–∫–µ—Ç–∏: –Ω–µ–º–∞—î\n\n"
            "–£—Å—ñ —Ç—ñ–∫–µ—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ ‚úÖ"
        )
        return
    
    # Display tickets
    tickets_text = f"üìã –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n\nüìù –í—ñ–¥–∫—Ä–∏—Ç—ñ —Ç—ñ–∫–µ—Ç–∏: {len(tickets)}\n\n"
    
    keyboard_buttons = []
    for ticket in tickets:
        # Get user info
        user = await db.get_user_by_id(ticket['user_id'])
        user_name = user['full_name'] if user else f"ID: {ticket['user_telegram_id']}"
        
        # Format creation date
        try:
            created_dt = datetime.fromisoformat(ticket['created_at'])
            created_str = created_dt.strftime("%d.%m.%Y %H:%M")
        except:
            created_str = ticket['created_at']
        
        # Display ticket preview
        tickets_text += f"üîπ –¢—ñ–∫–µ—Ç #{ticket['id']}\n"
        tickets_text += f"üë§ {user_name}\n"
        tickets_text += f"üìÖ {created_str}\n"
        tickets_text += f"üìù {ticket['message'][:50]}...\n\n"
        
        # Add button for each ticket
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"–¢—ñ–∫–µ—Ç #{ticket['id']} - {user_name[:20]}",
                callback_data=f"admin_ticket_{ticket['id']}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(tickets_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "start_registration")
async def start_registration(callback: CallbackQuery, state: FSMContext, db):
    """Start registration process"""
    await callback.message.edit_text(
        "üíª –ü–æ—á–Ω–µ–º–æ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –í–∞—Å.\n\n"
        "1) –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "–ú–∞—Å–∫ –Ü–ª–æ–Ω –ú–∞–∫—Å–∏–º–æ–≤–∏—á"
    )
    await state.set_state(RegistrationStates.waiting_for_full_name)
    await db.save_registration_state(callback.from_user.id, "waiting_for_full_name", {})
    await callback.answer()


@router.message(RegistrationStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext, db):
    """Process full name"""
    full_name = message.text.strip()
    
    # Validate name format (3 words)
    if len(full_name.split()) != 3:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë.\n"
            "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "–ú–∞—Å–∫ –Ü–ª–æ–Ω –ú–∞–∫—Å–∏–º–æ–≤–∏—á"
        )
        return
    
    await message.answer("‚úçÔ∏è –ü–Ü–ë –∑–∞–ø–∏—Å–∞–Ω–µ")
    
    _, data = await db.get_registration_state(message.from_user.id)
    data['full_name'] = full_name
    
    await message.answer(
        "üõë –ó–∞—É–≤–∞–∂–µ–Ω–Ω—è: –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∞ –Ω—ñ–∂ 2000 —Ä—ñ–∫ —Ç–∞ –Ω–µ –±—ñ–ª—å—à–∞ –Ω—ñ–∂ 2014.\n\n"
        "2) –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "24.08.2000"
    )
    
    await state.set_state(RegistrationStates.waiting_for_birth_date)
    await db.save_registration_state(message.from_user.id, "waiting_for_birth_date", data)


@router.message(RegistrationStates.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext, db):
    """Process birth date"""
    birth_date = message.text.strip()
    
    # Validate date format
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', birth_date):
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏.\n"
            "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "24.08.2000"
        )
        return
    
    # Validate year range
    try:
        day, month, year = birth_date.split('.')
        year = int(year)
        if year < 2000 or year > 2014:
            await message.answer(
                "üõë –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–∞ –Ω—ñ–∂ 2000 —Ä—ñ–∫ —Ç–∞ –Ω–µ –±—ñ–ª—å—à–∞ –Ω—ñ–∂ 2014.\n\n"
                "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "24.08.2000"
            )
            return
    except:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏.")
        return
    
    await message.answer("‚úçÔ∏è –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–∞!")
    
    _, data = await db.get_registration_state(message.from_user.id)
    data['birth_date'] = birth_date
    
    await message.answer(
        "ü§≥ –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–≤–æ—î —Ñ–æ—Ç–æ —Ñ–æ—Ä–º–∞—Ç—É 3—Ö4, —è–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ.\n\n"
        "üõë –°–ê–ú–ï 3—Ö4!!!"
    )
    
    await state.set_state(RegistrationStates.waiting_for_photo)
    await db.save_registration_state(message.from_user.id, "waiting_for_photo", data)


@router.message(RegistrationStates.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext, db, bot):
    """Process photo"""
    from utils.cloudinary_helper import upload_photo_to_cloudinary
    
    photo = message.photo[-1]
    
    # Download photo to temporary location
    os.makedirs("uploads/photos", exist_ok=True)
    temp_file_path = f"uploads/photos/{message.from_user.id}_{datetime.now().timestamp()}.jpg"
    
    await bot.download(photo, destination=temp_file_path)
    
    try:
        # Upload to Cloudinary
        cloudinary_url = await upload_photo_to_cloudinary(temp_file_path, message.from_user.id)
        
        # Delete local temp file
        try:
            os.remove(temp_file_path)
        except:
            pass
        
        await message.answer("‚úÖ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        
        _, data = await db.get_registration_state(message.from_user.id)
        data['photo_path'] = cloudinary_url
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {str(e)}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    await message.answer(
        "üíæ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É\n\n"
        "–ü—Ä–∏ –∑–∞—Ö–æ–¥—ñ –≤ Diia –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—É–≤–∞—Ç–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º—ñ, "
        "—Ç–æ–º—É –∑–∞—Ä–∞–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç–∏ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –¥–æ –≤—Ö–æ–¥—É\n\n"
        "üîë –†–æ–∑–ø–æ—á–Ω–µ–º–æ, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥—ñ–Ω —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ —è–∫–∏–π –±–∏ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.\n"
        "üõë –£—Ç–æ—á–Ω–µ–Ω–Ω—è: –¥–æ–≤–∂–∏–Ω–∞ –ª–æ–≥—ñ–Ω–∞ —Ç–∞ –ø–∞—Ä–æ–ª—é –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 4 –¥–æ 16 —Å–∏–º–≤–æ–ª—ñ–≤.\n\n"
        "ü™∂ –í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω:"
    )
    
    await state.set_state(RegistrationStates.waiting_for_login)
    await db.save_registration_state(message.from_user.id, "waiting_for_login", data)


@router.message(RegistrationStates.waiting_for_login)
async def process_login(message: Message, state: FSMContext, db):
    """Process login"""
    login = message.text.strip()
    
    # Validate login length
    if len(login) < 4 or len(login) > 16:
        await message.answer(
            "‚ùå –î–æ–≤–∂–∏–Ω–∞ –ª–æ–≥—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 4 –¥–æ 16 —Å–∏–º–≤–æ–ª—ñ–≤.\n\n"
            "ü™∂ –í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω:"
        )
        return
    
    # Get registration data
    _, data = await db.get_registration_state(message.from_user.id)
    is_editing = data.get('is_editing', False)
    
    # Check if login exists (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è)
    if not is_editing:
        if await db.login_exists(login):
            await message.answer(
                "üõë –î–∞–Ω–∏–π –ª–æ–≥—ñ–Ω –∑–∞–π–Ω—è—Ç–∏–π, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à–∏–π. "
                "–î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–∞–ø–∏—à—ñ—Ç—å /cancel."
            )
            return
    else:
        # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        user = await db.get_user_by_telegram_id(message.from_user.id)
        if user and user['login'] != login and await db.login_exists(login):
            await message.answer(
                "üõë –î–∞–Ω–∏–π –ª–æ–≥—ñ–Ω –∑–∞–π–Ω—è—Ç–∏–π, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —ñ–Ω—à–∏–π. "
                "–î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –Ω–∞–ø–∏—à—ñ—Ç—å /cancel."
            )
            return
    
    await message.answer("‚úçÔ∏è –õ–æ–≥—ñ–Ω –∑–∞–ø–∏—Å–∞–Ω–æ!")
    
    data['login'] = login
    
    await message.answer(
        "üõë –£—Ç–æ—á–Ω–µ–Ω–Ω—è: –º–∏ –Ω–µ –∑–Ω–∞—î–º–æ –≤–∞—à–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤, –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –π–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è, "
        "–º–∏ –≤–∏–¥–∞–ª–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º—ñ.\n\n"
        "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ."
    )
    
    await state.set_state(RegistrationStates.waiting_for_password)
    await db.save_registration_state(message.from_user.id, "waiting_for_password", data)


@router.message(RegistrationStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext, db):
    """Process password and complete registration"""
    password = message.text.strip()
    
    # Delete password message
    try:
        await message.delete()
    except:
        pass
    
    # Validate password length
    if len(password) < 4 or len(password) > 16:
        await message.answer(
            "‚ùå –î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—é –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 4 –¥–æ 16 —Å–∏–º–≤–æ–ª—ñ–≤.\n\n"
            "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ."
        )
        return
    
    # Get registration data
    _, data = await db.get_registration_state(message.from_user.id)
    is_editing = data.get('is_editing', False)
    
    success = False
    
    if is_editing:
        # Update existing user
        success = await db.update_user(
            telegram_id=message.from_user.id,
            full_name=data['full_name'],
            birth_date=data['birth_date'],
            photo_path=data['photo_path'],
            login=data['login'],
            password=password
        )
    else:
        # Create new user
        user_id = await db.create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            full_name=data['full_name'],
            birth_date=data['birth_date'],
            photo_path=data['photo_path'],
            login=data['login'],
            password=password
        )
        success = user_id is not None
    
    if success:
        action_text = "–æ–Ω–æ–≤–ª–µ–Ω–æ" if is_editing else "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        # If new registration, inform about subscription requirement
        if not is_editing:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíé –ü—Ä–∏–¥–±–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
                [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            await message.answer(
                f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è {action_text}!\n\n"
                f"üë§ –ü–Ü–ë: {data['full_name']}\n"
                f"üóìÔ∏è –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data['birth_date']}\n"
                f"üîë –õ–æ–≥—ñ–Ω: {data['login']}\n\n"
                f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n\n"
                f"üí° –î–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞.\n"
                f"–ü—Ä–∏–¥–±–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π!",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è {action_text}!\n\n"
                f"üë§ –ü–Ü–ë: {data['full_name']}\n"
                f"üóìÔ∏è –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data['birth_date']}\n"
                f"üîë –õ–æ–≥—ñ–Ω: {data['login']}\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é /menu"
            )
        
        # Clear registration state
        await db.clear_registration_state(message.from_user.id)
        await state.clear()
    else:
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext, db):
    """Cancel registration"""
    await state.clear()
    await db.clear_registration_state(message.from_user.id)
    await message.answer(
        "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."
    )



# Clean version - no merge conflicts